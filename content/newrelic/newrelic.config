<?xml version="1.0"?>

<!-- Copyright (c) 2008-2012 New Relic, Inc.  All rights reserved. -->

<!--
    This file configures the New Relic .NET Agent.  New Relic monitors
    Ruby/Rails, Java, Python, PhP and .NET applications
    with deep visibility and low overhead.
    For more information, visit www.newrelic.com.

    When you edit this file, please use an XML aware editor such as Visual Studio
    and pair with the companion file newrelic.xsd to minimize the
    chance of introducing typos that may confuse the agent when it is run.
-->

<configuration xmlns="urn:newrelic-config" agentEnabled="true">

	<!-- ============================== New Relic Service =============================== -->

	<!-- This section configures the agent to connect to the New Relic service.

		Attributes:

		licenseKey - You must specify the license key associated with your New Relic
  			account.  This key binds your agent's data to your account in the
  			New Relic service.

		ssl - The agent communicates with the New Relic service via http by
			default.  If you want to communicate via https to increase
			security, then turn on SSL by setting this value to true.  Note,
			this will result in increased CPU overhead to perform the
			encryption involved in SSL communication, but this work is done
			asynchronously to the threads that process your application code,
			so it should not impact response times.
		-->
		<service licenseKey="REPLACE_WITH_LICENSE_KEY" ssl="true">
		<!-- Proxy settings for connecting to the New Relic service. -->
		<!-- If a proxy is used, the host attribute is required.

		Attributes:

		host - The proxy server host name.

		port - The proxy server port (optional - defaults to 8080).

		user - The username used to authenticate with the proxy server (optional).

		password - The password used to authenticate with the proxy server (optional).

		domain - The domain used to authenticate with the proxy server (optional).
		-->

		<!--
		<proxy host="hostname" />
		-->
	</service>

	<!-- ============================== Application =============================== -->

	<!-- This section configures information about your application. -->
	<application>


		<!-- Application Name -->
		<!-- If IIS is hosting multiple applications and you wish to have them
			report into New Relic as separate applications, create an application setting in
			the Web.Config of each application named NewRelic.AppName -->

		<!-- Set this to be the name of your application as you'd like it to show
		up in New Relic.  New Relic will then auto-map instances of your application
		into an "application" on your home dashboard page.  -->
		<name>My Application</name>

		<!-- If you want to map this instance into multiple apps, like "AJAX Requests" and
		"All UI" then specify up to three distinct names. -->

		<!--
		<name>AJAX Requests</name>
		<name>All UI</name>
		-->

	</application>

	<!-- ============================== Logging =============================== -->

	<!-- The agent generates its own log file to keep its logging
		information separate from that of your application.
		Specify its log level here.
		Choices are from the enumeration (in any case):
		off, emergency, fatal, alert, critical, severe,
		error, warn, notice, info, debug, fine, trace, finer, verbose,
		finest, all.
    
    The agent will also do a full audit of the data that is sent to New Relic's collectors 
    when you enable audit logging by adding the auditLog attribute to the log node and assigning a value of true to it.
    
    ex. <log level="info" auditLog="true"/>
	-->
	<log level="off"/>

	<!-- ============================== Instrumentation =============================== -->
	<!-- By default, the .NET agent instruments IIS asp worker processes and
	    Azure web and worker roles.  To instrument other processes, do step (1) and either (2a) or (2b).

		1) Create a system environment variable named COR_ENABLE_PROFILING with a value of 1.
		2) EITHER
		   (2a) Add an application setting to your application's configuration that enables the agent.
		     For example, if the application name is MyServer.exe, edit MyServer.exe.config and add
			   a new appSetting with a key named "NewRelic.AgentEnabled" and a value of "true":
				<?xml version="1.0"?>
				<configuration>
					<appSettings>
						<add key="NewRelic.AgentEnabled" value="true"/>
						<add key="NewRelic.AppName" value="MyCustomName"/>
					</appSettings>
				</configuration>
		   OR
		   (2b) uncomment the instrumentation element and set application name to the name of your
			custom server application.  Multiple application elements can be specified.

		Attributes:

		log - If set to true, each method that is instrumented will be logged in the application event
			log.  This is helpful when debugging custom instrumentation.
		-->
	<!--
	<instrumentation log="false">
		<applications>
			<application name="MyCustomServer.exe" />
		</applications>
	</instrumentation>
	-->

	<!-- ============================== Request parameters =============================== -->

  	<!-- The requestParameters element tells the transaction tracer and the error collector
		whether or not to capture HTTP params.  To ignore specific parameters so that they are never
		captured, specify ignore elements.

		Attributes:

		enabled - Turns on request parameter capturing for the Transaction Tracer and Error Collector features.
		-->
	<requestParameters enabled="false">
		<ignore>credit_card</ignore>
	</requestParameters>

	<!-- ============================== Transaction Tracer =============================== -->

	<!-- Transaction tracer captures deep information about slow
			transactions and sends this to the New Relic service once a
			minute. Included in the transaction is the exact call sequence of
			the transactions including any SQL statements issued.

		Attributes:

		enabled - Transaction tracer is enabled by default. Set this to false to
  			turn it off. This feature is only available in the Professional product version.

		transactionThreshold - The threshold (in milliseconds) for when to collect a transaction
  			trace. When the response time of a controller action exceeds
  			this threshold, a transaction trace will be recorded and sent to
  			New Relic. Valid values are any float value, or (default) "apdex_f",
  			which will use the threshold for an dissatisfying Apdex
  			controller action - four times the Apdex T value.

		stackTraceThreshold - The threshold (in milliseconds) for when to collect a stack trace for a SQL
  			call. In other words, when SQL statements exceed this threshold,
  			then capture and send to New Relic the current stack trace. This is
  			helpful for pinpointing where long SQL calls originate from.

		recordSql - When transaction tracer is on, SQL statements can optionally be
  			recorded. The recorder has three modes, "off" which sends no
  			SQL, "raw" which sends the SQL statement in its original form,
  			and "obfuscated", which strips out numeric and string literals

		explainEnabled - Determines whether the agent will capture query plans for slow
  			SQL queries.  Only supported in SQL Server, MySql, and postgres.  Should be
  			set to false when using other adapters.

		explainThreshold - The threshold for query execution time (in milliseconds) below which query plans will
  			not be captured.  Relevant only when `explainEnabled` is true.
		-->
	<transactionTracer enabled="true"
		transactionThreshold="apdex_f"
		stackTraceThreshold="500"
		recordSql="obfuscated"
		explainEnabled="true"
		explainThreshold="500"/>

	<!-- ============================== Error Collector =============================== -->

	<!-- Error collector captures information about uncaught exceptions and
		sends them to the New Relic service for viewing.

		Attributes:

		enabled - Error collector is enabled by default. Set this to false to turn
  			it off. This feature is only available in the Professional product version.

		-->
	<errorCollector enabled="true">

		<!-- To stop specific exceptions from reporting to New Relic, list them here. -->
		<ignoreErrors>
			<exception>System.IO.FileNotFoundException</exception>
			<exception>System.Threading.ThreadAbortException</exception>
		</ignoreErrors>

		<!-- To stop specific error codes from reporting to New Relic, list them here.
    You may use standard integral HTTP errorcodes, such as just 401, or may use
    Microsoft FullStatusCodes, with decimal points, such as 401.4 or 403.18 -->
		<ignoreStatusCodes>
			<code>401</code>
			<code>404</code>
		</ignoreStatusCodes>

	</errorCollector>

	<!-- ============================== Browser Monitoring =============================== -->
	<!-- New Relic Real User Monitoring gives you insight into the performance real users are
         experiencing with your website. This is accomplished by measuring the time it takes for
         your users' browsers to download and render your web pages by injecting a small amount
		 of JavaScript code into the header and footer of each page.

		 Attributes:

		 autoInstrument - By default the agent automatically injects the monitoring JavaScript
			into ASP pages.  Set this attribute to false to turn off this behavior.
		 -->
	<browserMonitoring autoInstrument="true" />

</configuration>
